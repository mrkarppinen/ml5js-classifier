{"version":3,"sources":["loading.svg","components/loading.js","components/classify.js","components/open-file.js","components/view-image.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","components_loading","react_default","a","createElement","Fragment","src","LoadingIcon","classify","_ref","image","classifier","_useState","useState","_useState2","Object","slicedToArray","result","setResult","_useState3","_useState4","loading","setLoading","useEffect","img","document","addEventListener","predict","err","results","map","concat","className","probability","toFixed","join","id","dangerouslySetInnerHTML","__html","LoadButton","styled","button","_templateObject","process","Input","input","attrs","type","_templateObject2","open_file","imageSelected","scaleImage","dataUri","scale","Promise","resolve","reject","onload","canvas","width","height","getContext","drawImage","toDataURL","accept","onChange","event","target","files","length","file","reader","FileReader","size","then","readAsDataURL","onClick","querySelector","click","view_image","imageVisible","setImageVisible","style","color","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setImage","bind","assertThisInitialized","state","window","ml5","imageClassifier","setState","Component","Boolean","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.91e1d7d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.7aa9d0ff.svg\";","import React from 'react';\nimport LoadingIcon from '../loading.svg';\n\nexport default () => {\n    return (\n        <>\n            <img  src={LoadingIcon} />\n        </>\n    );\n};","import React, {useState, useEffect} from 'react';\nimport Loading from './loading';\n\nexport default ({image, classifier}) => {\n\n    const [result, setResult] = useState(null);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (image) {\n            setLoading(true);\n            const img = document.createElement(\"img\");\n            img.src = image;\n            img.addEventListener('load', () => {\n                classifier.predict(img, function(err, results) { \n                    setLoading(false);\n                    if (!err) {\n                        const result = results\n                        .map( result => `${result.className}:${result.probability.toFixed(4)}` )\n                        .join('</br>');\n                        setResult(result);\n                    }\n                });\n            });\n        }\n    }, [image]);\n\n    return (\n        <div>\n            <div id=\"result\" dangerouslySetInnerHTML={{'__html':result}}></div>\n            { loading && <Loading /> }\n        </div>\n    );\n\n};","\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst LoadButton = styled.button`\n    border: none;\n    background: url(${process.env.PUBLIC_URL}/Camera-icon.png);\n    background-size: contain;\n    width: 100px;\n    height: 100px;\n    cursor: pointer;\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nconst Input = styled.input.attrs({ type: 'file' })`\n    display: none;\n`;\n\nexport default ({imageSelected}) => {\n    const MAX_FILE_SIZE = 100000;\n\n    const onChange = (event) => {\n\n        if (event.target.files && event.target.files.length > 0){\n            const file = event.target.files[0];\n            const reader = new FileReader();\n    \n            reader.onload = (event) => {\n                if (file.size < MAX_FILE_SIZE){\n                    imageSelected(event.target.result); \n                }else {\n                    scaleImage(event.target.result, file.type, MAX_FILE_SIZE/file.size).then( result => imageSelected(result) )\n                }\n            };\n            reader.readAsDataURL(file);\n        }\n\n    }; \n\n    const scaleImage = (dataUri, type, scale) => {\n        return new Promise( (resolve, reject) => {\n                const img = document.createElement(\"img\");\n                img.src = dataUri;\n                img.onload = () => {\n                    const canvas = document.createElement('canvas');\n                    canvas.width = img.width * scale;\n                    canvas.height = img.height * scale;\n                    canvas.getContext('2d').drawImage(img, 0, 0, canvas.width, canvas.height);\n                    resolve(canvas.toDataURL(type));                \n                }\n        });\n    }\n\n    const openInput = () => {\n        document.querySelector('input[type=\"file\"]').click();\n    }\n\n    return (\n        <div>\n            <Input accept=\"image/*\" onChange={onChange}/>\n            <LoadButton type=\"button\" onClick={openInput} />\n        </div>\n    );\n};","import React, {useState, useEffect} from 'react';\n\nexport default ({image}) => {\n\n    const [imageVisible, setImageVisible] = useState(false);\n\n    useEffect( () => {\n        if (image){\n            setImageVisible(true);\n            const img = document.querySelector('#image');\n            img.src = image;\n        }\n    }, [image]);\n\n    return (\n        <div>\n            <img id=\"image\" style={{width: '400px'}} />\n            { !imageVisible && <p style={{color: '#666'}} >Select image...</p>}\n        </div>\n    );\n};","import React, { Component } from 'react';\nimport './App.css';\nimport Classify from './components/classify';\nimport OpenFile from './components/open-file';\nimport ViewImage from './components/view-image';\n\nexport default class App extends Component{\n\n  constructor(){\n    super();\n    this.setImage = this.setImage.bind(this);\n    this.state = {\n      image: null\n    };\n    this.classifier = window.ml5.imageClassifier('MobileNet', () => {});\n  }\n\n  setImage(image){\n    this.setState({\n      image\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <main>\n          <OpenFile imageSelected={this.setImage} />\n          <ViewImage image={this.state.image} />\n          <Classify image={this.state.image} classifier={this.classifier}/>\n        </main>\n      </div>\n    );\n  }\n  \n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}